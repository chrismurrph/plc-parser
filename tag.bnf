S = tag
anything-word = #'[/\'<>(),$=\:.\\0-9a-zA-Z_-]+'
one-or-more-anythings = (anything-word whitespace) * anything-word ? whitespace ?
anything-string = quote one-or-more-anythings quote
quote = '\"'
ending-op = ';'
assign-op = ':='
array-dimension = <'['> integer <']'>
array-comment = "COMMENT[" integer ']'
dot-comment = "COMMENT" ('.' variable) * ('.' integer) ?
tag-comment-assign = (array-comment | dot-comment) whitespace assign-op whitespace anything-string
tag-radix-assign = "RADIX" whitespace assign-op whitespace radix-type
tag-description-assign = "Description" whitespace assign-op whitespace anything-string
message-type-assign = "MessageType := CIP Generic"
requested-length-assign = "RequestedLength" whitespace assign-op whitespace integer
connected-flag-assign = "ConnectedFlag" whitespace assign-op whitespace integer
connection-path-assign = "ConnectionPath" whitespace assign-op whitespace anything-string
comm-type-code-assign = "CommTypeCode" whitespace assign-op whitespace integer
service-code-assign = "ServiceCode" whitespace assign-op whitespace base-sixteen-number
object-type-assign = "ObjectType" whitespace assign-op whitespace base-sixteen-number
target-object-assign = "TargetObject" whitespace assign-op whitespace integer
attribute-number-assign = "AttributeNumber" whitespace assign-op whitespace base-sixteen-number
local-index-assign = "LocalIndex" whitespace assign-op whitespace integer
local-element-assign = "LocalElement" whitespace assign-op whitespace quote variable quote
destination-assign = "DestinationTag" whitespace assign-op whitespace quote variable quote
large-packet-usage-assign = "LargePacketUsage := No"
tag-enclosure-assign = tag-radix-assign | tag-description-assign | tag-comment-assign | message-type-assign 
| requested-length-assign | connected-flag-assign | connection-path-assign | comm-type-code-assign 
| service-code-assign | object-type-assign | target-object-assign | attribute-number-assign | local-index-assign 
| local-element-assign | large-packet-usage-assign | destination-assign
tag-enclosure = '(' (tag-enclosure-assign ',' newline whitespace) * tag-enclosure-assign ')'
newline = <'\r' ? '\n'>
raw-type = "DINT" | "REAL" | "SINT" | "BOOL" | "INT" | "STRING" | "COUNTER" | "MESSAGE"
array-dimmed-raw-type = raw-type array-dimension ?
native-type = raw-type | "BIT"
custom-type = "SockAddr" | "STR_OUT" | "STR_4096" | "Gas_Alm" | "Gas_Stat" | "MBTransaction" | "STR_1" | "Always" 
| "READ_DATA_REQ" | "HMI_R_Gas" | "HMI_R_PLC" | "HMI_W" | "Local_Chassis" | "OpenConnParams" | "READ_RESP_STR" 
| "WRT_DATA" | "MBConnection" | "REQUEST_PARAMETERS" | "String_1" | "LinearScalingIn" | "PLC_TIME" | "TIMER" 
| "R1_S1_AI_Raw" | "SCADA_R_Gas" | "Gases" | "TIME_OF_PLC" | "GasesOnly" | "SCADA_R_Sys" | "Tube_Seq_Item"
| "STR_462"
add-on-instruction-type = "MBUS_REAL"
radix-type = "Float" | "Decimal" 
array-dimmed-type = (raw-type | custom-type | add-on-instruction-type) array-dimension ?
<whitespace> = <#'\s+'>
variable = #'[0-9a-zA-Z_]+' array-dimension ?
dot-variable = variable ('.' dot-variable) ? ('.' integer) ?
tag-definition = variable whitespace ':' whitespace array-dimmed-type (whitespace tag-enclosure) ? (whitespace assign-op whitespace data-number)? ending-op
output-map-definition = variable whitespace "OF" whitespace dot-variable whitespace tag-enclosure ending-op
definitions = ((tag-definition | output-map-definition) <newline> <whitespace>) +
data-rhs-of-assign = '[' data-number (newline whitespace) ? (',' (data-number | single-quoted-data-number)) * ']'
integer = '-' ? #'[0-9]+'
float = #'[-+]?[0-9]*\.[0-9]+'
base-sixteen-number = "16#" #'[0-9a-f]+'
gobble-anything = #'[/#$0-9a-zA-Z|~^&! \"*;`\[\]%+@{}?<>(),=\:.\\_-]+' | "\'$" | "\'I" | "\'<" | "\'^"
data-number = integer-data-number | engineering-float-data-number | data-rhs-of-assign | base-two-data-number
single-quoted-data-number = "\'" gobble-anything * "\'" (newline whitespace) ? 
base-two-data-number = "2#" integer (newline whitespace) ?
engineering-float-data-number = float ('e+' | 'e-') integer (newline whitespace) ?
integer-data-number = integer (newline whitespace) ?
tag = "TAG" <newline whitespace> definitions "END_TAG"