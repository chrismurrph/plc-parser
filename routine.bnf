<S> = routine
rung-comment = "RC:" whitespace anything-string (newline whitespace anything-string) * ending-op
branch-level = ((instruction | branch) ' ') +
branch = '[' (branch-level ',') + branch-level ']'
instruction-name = "EQU" | "XIC" | "CMP" | "XIO" | "MOV" | "XIC" | "OTL" | "OTE" | "FLL" | "NEQ" | "XIO" | "RES"
| "LES" | "TON" | "CTU" | "NOP" | "SUB" | "MUL" | "ADD" | "DIV" | "BTD" | "COP" | "GSV" | "ONS" | "OTE" | "MOD"
| "GEQ" | "CLR" | "OTU" | "JSR" | "OSR" | "GRT" | "AFI" | "LEQ" | "CPT" | "FOR" | "MSG" | "LBL" | "JMP" | "MID"
| "SWPB" | "DELETE" | "OR" | "AND" | "SBR" | "RET" | "CONCAT"
add-on-instruction-name = "MBUS_REAL" | "LinearScalingIn"
ch-data = "Ch" integer ("Data" | "Underrange" | "Overrange")
rest-instruction-arg =
  ( ('.' simple-word) ? ('[' instruction-name-part ']') ? ('.' simple-word ?) * ('[' (simple-word | integer) ']') ?)
| (':' integer ':' #'[A-Z]' '.' (ch-data | "Data"))
instruction-arg = simple-word rest-instruction-arg
instruction-name-part = (instruction-arg | integer | float | '?' | "S:FS")
instruction-args = instruction-name-part ((',' | '=' | '<=' | '+' | '>' | '*' | '<' | '<>') instruction-name-part) *
instruction = (instruction-name | add-on-instruction-name) '(' instruction-args ? ')'
rung = "N: " (instruction | branch) + ending-op
routine = "ROUTINE" ' ' word ' ' <newline> ? enclosure ? (whitespace (rung-comment | rung) <newline>) + whitespace "END_ROUTINE"
data-fills = (whitespace data-fill <newline>) +
data-fill = normal-fill | bit-fill | custom-fill
normal-fill = raw-type whitespace variable whitespace ? enclosure ? ending-op
bit-fill = "BIT" whitespace bit-variable whitespace variable whitespace ':' whitespace integer whitespace enclosure ? ending-op
custom-fill = custom-type whitespace variable ending-op
enclosure = '(' any-assigns ')'
array-comment = "COMMENT[" integer ']'
dot-comment = "COMMENT." integer
tag-comment-assign = (array-comment | dot-comment) whitespace assign-op whitespace anything-string
comment-assigns = leading-comment-assign * comment-assign
comment-enclosure = '(' comment-assigns ')'
comment-variable = "COMMENT." variable
<comment-assign> = comment-variable whitespace assign-op whitespace wordy-string
leading-comment-assign = comment-assign ',' newline <whitespace>
<version-assign> = variable <whitespace> assign-op <whitespace> float ending-op
any-assigns = any-assign-comma * any-assign 
any-assign = variable <whitespace> assign-op <whitespace> rhs-of-any-assign
any-assign-comma = any-assign ',' newline whitespace
rhs-of-any-assign = integer | float | anything-string | version | base-number | "No" | "NoFamily" | "StringFamily" | "ASCII"
triple-bracket-rhs-of-assign = "[[[___" xml-word "___]]]"
engineering-float = float ('e+' | 'e-') integer
base-two-number = "2#" integer
single-quote-number = ("\'" | "\'=") ('$' (integer | 'r' | '1E' | '00<' | '1C' | '8D' | '8E')) + "\'"
data-number = base-two-number | integer | engineering-float | single-quote-number | data-rhs-of-assign
connection-number = integer | engineering-float
data-rhs-of-assign = '[' data-number (',' data-number (newline whitespace) ? ) * ']'
connection-rhs-of-assign = '[' connection-number (',' connection-number (newline whitespace) ? ) * ']'
assign-op = ':='
ending-op = ';'
one-comment = <start-comment> stars <inside-comment> stars <end-comment>
start-comment = <'('>
end-comment = <')'>
<stars> = <'*'> +
<inside-comment> = <allowed-inside-comment> +
<whitespace> = <#'\s+'>
variable = #'[0-9a-zA-Z_]+' array-dimension ?
bit-variable = variable
array-dimension = <'['> integer <']'>
simple-word = #'[0-9a-zA-Z_-]+' ('.' integer) ?
word = #'[.\\0-9a-zA-Z_-]+'
anything-word = #'[#;’‘\'\]\[%/+*<>(),$=\:.\\0-9a-zA-Z_-]+'
xml-word = #'[/<>.\\0-9a-zA-Z-]+'
one-or-more-words = (word whitespace) * word
one-or-more-anythings = whitespace ? (anything-word whitespace) * anything-word ? whitespace ?
wordy-string = quote one-or-more-words quote
anything-string = quote one-or-more-anythings quote
quote = '\"'
integer = '-' ? #'[0-9]+'
float = #'[-+]?[0-9]*\.[0-9]+'
version = "V" float
punctuation = #'[.,\/#!$%\^&\*;:{}=\-_`~()\']+'
newline = <'\r' ? '\n'>
<allowed-inside-comment> = newline | whitespace | word | integer | punctuation
base-number = integer '#' word
raw-type = "DINT" | "REAL" | "SINT" | "BOOL" | "INT" | "STRING"
array-dimmed-raw-type = raw-type array-dimension ?
array-dimmed-type = (raw-type | custom-type) array-dimension ?
native-type = raw-type | "BIT"
custom-type = "SockAddr" | "STR_OUT" | "STR_4096" | "Gas_Alm" | "Gas_Stat" | "MBTransaction" | "STR_1"
radix-type = "Float" | "Decimal"