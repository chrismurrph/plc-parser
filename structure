
One rung, they run into each other.
Notice comma where 2 args required

MOV(SMRTGS_W_Tubes_Seq_Buffer[1].Tube_Num,Tubes_Seq[1].Tube_Num)
MOV(SMRTGS_W_Tubes_Seq_Buffer[1].Duration,Tubes_Seq[1].Duration)
XIC(SMRTGS_W_Tubes_Seq_Buffer[1].Enabled)
OTE(Tubes_Seq[1].Enabled);

Brackets means a branch
Space comma means a branch level
In branch level they don't run into each other but are separated by a space
Space before closing bracket to finish off a branch
After closing bracket just runs into

[LES(CONSTANT_Fast_Holding_Dead_Time,2000) ,
 LES(CONSTANT_Dead_Time,2000) ,
 LES(CONSTANT_Fast_Holding_Duration,4000) ,
 GRT(CONSTANT_Fast_Holding_Duration,7000) ,
 SUB(CONSTANT_Fast_Holding_Duration,CONSTANT_Fast_Holding_Dead_Time,TEMP_Fast_Holding_Sampling) LES(TEMP_Fast_Holding_Sampling,2000) ,
 NEQ(Tubes_Seq[0].Tube_Num,0) ,
 NEQ(Tubes_Seq[0].Duration,0) ,
 XIC(Tubes_Seq[0].Enabled) ,
 EQU(Tubes_Seq[1].Tube_Num,0) ,
 EQU(Tubes_Seq[1].Duration,0) ,
 XIO(Tubes_Seq[1].Enabled) ]
OTE(TEMP_Failed_Initialisation);

Rung( 7, Branch("fifteen",
        BranchLevel(LES(c.CONSTANT_Fast_Holding_Dead_Time, 2000)),
        BranchLevel(LES(c.CONSTANT_Dead_Time, 2000)),
        BranchLevel(LES(c.CONSTANT_Fast_Holding_Duration, 4000)),
        BranchLevel(GRT(c.CONSTANT_Fast_Holding_Duration, 7000)),
        BranchLevel(SUB(c.CONSTANT_Fast_Holding_Duration, c.CONSTANT_Fast_Holding_Dead_Time, p.TEMP_Fast_Holding_Sampling),
          LES( p.TEMP_Fast_Holding_Sampling, 2000)),
        BranchLevel(NEQ( p.Tubes_Seq(0).Tube_Num, 0)),
        BranchLevel(NEQ( p.Tubes_Seq(0).Duration, 0)),
        BranchLevel(NO( p.Tubes_Seq(0).Enabled)),
        BranchLevel(EQU( p.Tubes_Seq(1).Tube_Num, 0)),
        BranchLevel(EQU( p.Tubes_Seq(1).Duration, 0)),
        BranchLevel(NC( p.Tubes_Seq(1).Enabled))
      ), OTE( p.TEMP_Failed_Initialisation)),

Need to be able to do this, but no Scala to look at:
Interesting thing here is indexing with TransactionPtr - didn't know you could do that

N: EQU(RW_Select,0)XIC(MBTU_Transactions_00[TransactionPtr].Enabled)CMP(Modbus_TransID=MBTU_Transactions_00[TransactionPtr].TransID)[XIO(CMD_IN.7) MOV(0,MBTU_Transactions_00[TransactionPtr].TransStat) MOV(0,MBTU_Transactions_00[TransactionPtr].TransLastError) ,XIC(CMD_IN.7) MOV(Modbus_Bytes,MBTU_Transactions_00[TransactionPtr].TransLastError) ]MOV(TransactionPtr,WriteTransIDX)MOV(MBTU_Transactions_00[TransactionPtr].LocalOffset,LocalOffset)[OTL(MBTU_Transactions_00[TransactionPtr].TransComplete) ,OTL(TransFound) ];

First rung is branch with two levels
A comma separates the levels and there's a space after every instruction that's on a level

Third rung:
A space separates instructions on the same branch level (so don't run into each other)
The Scala is different because Ben decided to do an OTU

N: XIC(S:FS)[MOV(0,STATE) ,JSR(Initialise,0) ];
N: NEQ(STATE,0)JSR(A_Input_Map,0);
RC: "SMARTGAS-connect sets SMRTGS_W_Pending_Tubes_Seq_Changes to TRUE. This rung picks up that change and sets it back to FALSE after calling A_Populate_Tubes_Seq.$N"
					    "=================================================";
N: NEQ(STATE,0)XIC(SMRTGS_W_Pending_Tubes_Seq_Changes)[JSR(Update_Sequence_Time,0) JSR(A_Populate_Tubes_Seq,0) ,OTU(SMRTGS_W_Pending_Tubes_Seq_Changes) ];

      Rung(1, NO(p.S_FS),
        Branch("Startup subroutine, only happens once",BranchLevel(MOV(0, c.STATE)),
          BranchLevel(JSR(s.Initialise)))),
      Rung(2, NEQ(c.STATE, 0), JSR(s.A_Input_Map)),
      //Adrian's does not do, but we will soon want to add this in
      //Rung(3, NEQ(c.STATE, 0), JSR(s.A_Populate_Vacuum_Readings())),
      Rung(3, NEQ(c.STATE, 0), NO(c.SMRTGS_W_Pending_Tubes_Seq_Changes),
        Branch("Populate tubes from SMARTGAS then turn the trigger off",BranchLevel(JSR(s.Update_Sequence_Time),JSR(s.A_Populate_Tubes_Seq)),
          BranchLevel(NC(c.SMRTGS_W_Pending_Tubes_Seq_Changes), OTE(c.SMRTGS_W_Pending_Tubes_Seq_Changes)))),


