<S> = module
module = <"MODULE"> whitespace word whitespace enc <newline>
  (whitespace extended-prop-assign <newline>) ? 
  (whitespace config-data-assign <newline>) ? 
  (whitespace connection <newline> <newline>) ?
  whitespace <"END_MODULE">
<newline> = <'\r' ? '\n'>
<assign-op> = ':='
ending-op = ';'
array-dimension = <'['> int <']'>
variable = #'[0-9a-zA-Z_]+' array-dimension ?
<whitespace> = <#'\s+'>
<anything-word> = #'[/<>(),$=\:.\\0-9a-zA-Z_-]+'
<one-or-more-anythings> = (anything-word whitespace) * anything-word ? whitespace ?
<anything-string> = <quote> one-or-more-anythings <quote>
quote = '\"'
word = #'[.\\0-9a-zA-Z_-]+'
base-number = int '#' word
version = "V" float
int = '-' ? #'[0-9]+'
float = #'[-+]?[0-9]*\.[0-9]+'
<rhs-of-assign> = int | float | anything-string | version | base-number | "No" | "NoFamily" | "StringFamily" | "ASCII"
assign = variable <whitespace> <assign-op> <whitespace> rhs-of-assign
enc = <'('> (assign <','> newline whitespace) * assign <')'>
base-two-number = "2#" int
single-quote-number = ("\'" | "\'=") ('$' (int | 'r' | '1E' | '00<' | '1C' | '8D' | '8E')) + "\'"
eng-neg = <'e-'>
eng-pos = <'e+'>
eng = float (eng-pos | eng-neg) int (newline whitespace) ?
data-number = base-two-number | int | eng | single-quote-number | data-rhs-of-assign
connection = <"CONNECTION"> whitespace word whitespace enc <newline> connection-assigns whitespace <"END_CONNECTION">
connection-assigns = (whitespace connection-assign <newline>) +

data-rhs-of-assign = <'['> data-number (<','> data-number (newline whitespace) ? ) * <']'>
extended-prop-assign = <"ExtendedProp"> <whitespace> <assign-op> <whitespace> triple-bracket-rhs-of-assign
config-data-assign = <"ConfigData"> <whitespace> <assign-op> <whitespace> data-rhs-of-assign <ending-op>
input-data-assign = <"InputData"> <whitespace> (comment-enc <whitespace>) ? <assign-op> <whitespace> connection-rhs-of-assign <ending-op>

input-force-data-assign = <"InputForceData"> <whitespace> <assign-op> <whitespace> connection-rhs-of-assign <ending-op>
output-data-assign = <"OutputData"> <whitespace> <assign-op> <whitespace> connection-rhs-of-assign <ending-op>
output-force-data-assign = <"OutputForceData"> <whitespace> <assign-op> <whitespace> connection-rhs-of-assign <ending-op>

<connection-assign> = input-data-assign | input-force-data-assign | output-data-assign | output-force-data-assign
connection-number = int | eng
<connection-rhs-of-assign> = <'['> connection-number (<','> connection-number (newline whitespace) ? ) * <']'>
triple-bracket-rhs-of-assign = <"[[[___"> xml-word <"___]]]">

xml-word = #'[/<>.\\0-9a-zA-Z-]+'
comment-assigns = leading-comment-assign * comment-assign
comment-enc = <'('> comment-assigns <')'>
comment-variable = "COMMENT." variable
<comment-assign> = comment-variable whitespace assign-op whitespace wordy-string
leading-comment-assign = comment-assign ',' newline <whitespace>
one-or-more-words = (word whitespace) * word
wordy-string = quote one-or-more-words quote